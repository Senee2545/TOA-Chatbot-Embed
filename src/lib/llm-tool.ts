import { tool } from "@langchain/core/tools";
import { z } from "zod";
import { getDOARetriever } from "./doa_retriever";
import { getDOA_Main_Retriever } from "./doa_main_retriever";

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö results
interface DOASearchResults {
    searchQuery: string;
    searchType: string;
    overview: {
        found: boolean;
        totalCategories: number;
        categories: Array<{
            category: string;
            content: string;
            totalItems: number | string;
        }>;
    } | null;
    details: {
        found: boolean;
        totalDetails: number;
        items: Array<{
            no: string;
            category: string;
            businessActivity: string;
            content: string;
        }>;
    } | null;
}

const doaDualSearchSchema = z.object({
    query: z.string().describe("‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö DOA"),
    searchType: z.enum(["overview", "detail", "both"]).default("both").describe("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: overview=‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏£‡∏ß‡∏°, detail=‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î, both=‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á"),
    category: z.string().optional().describe("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞"),
    businessActivityNo: z.string().optional().describe("‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°")
});

// const doaDualSearchTool = tool(
//     async ({ query, searchType, category, businessActivityNo }): Promise<string> => {
//         try {
//             console.log('üîç DOA Dual Search called with:', { query, searchType, category, businessActivityNo });

//             let searchQuery = query;
//             if (category) searchQuery += ` category:${category}`;
//             if (businessActivityNo) searchQuery += ` No.:${businessActivityNo}`;

//             const results: DOASearchResults = {
//                 searchQuery,
//                 searchType,
//                 overview: null,
//                 details: null
//             };

//             // Step 1: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Overview (Summary Table) - ‡πÉ‡∏ä‡πâ getDOA_Main_Retriever
//             if (searchType === "overview" || searchType === "both") {
//                 try {
//                     const summaryRetriever = await getDOA_Main_Retriever(); // Main table (Summary)
//                     const summaryDocs = await summaryRetriever.invoke(searchQuery);
                    
//                     if (summaryDocs.length > 0) {
//                         results.overview = {
//                             found: true,
//                             totalCategories: summaryDocs.length,
//                             categories: summaryDocs.slice(0, 3).map(doc => ({
//                                 category: doc.metadata.Category || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
//                                 content: doc.pageContent,
//                                 totalItems: doc.metadata.totalItems || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
//                             }))
//                         };
//                         console.log('üìä Found overview data:', results.overview.totalCategories, 'categories');
//                     }
//                 } catch (error) {
//                     console.error('Overview search error:', error);
//                 }
//             }

//             // Step 2: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Details (Detail Table) - ‡πÉ‡∏ä‡πâ getDOARetriever
//             if (searchType === "detail" || searchType === "both") {
//                 try {
//                     const detailRetriever = await getDOARetriever(); // Detail table
//                     const detailDocs = await detailRetriever.invoke(searchQuery);
                    
//                     if (detailDocs.length > 0) {
//                         results.details = {
//                             found: true,
//                             totalDetails: detailDocs.length,
//                             items: detailDocs.slice(0, 5).map(doc => ({
//                                 no: doc.metadata["No."] || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
//                                 category: doc.metadata.Category || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
//                                 businessActivity: doc.metadata["Business Activity"] || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
//                                 content: doc.pageContent.substring(0, 800) + (doc.pageContent.length > 800 ? "..." : "")
//                             }))
//                         };
//                         console.log('üìã Found detail data:', results.details.totalDetails, 'items');
//                     }
//                 } catch (error) {
//                     console.error('Detail search error:', error);
//                 }
//             }

//             // Step 3: ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏∞‡πÑ‡∏£
//             if (!results.overview?.found && !results.details?.found) {
//                 return JSON.stringify({
//                     message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤",
//                     searchQuery: searchQuery,
//                     suggestions: [
//                         "‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô ‡πÄ‡∏ä‡πà‡∏ô 'employee', 'training', 'payroll'",
//                         "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏∞‡∏Å‡∏î‡∏Ñ‡∏≥",
//                         "‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏ó‡∏¢"
//                     ]
//                 });
//             }

//             return JSON.stringify(results, null, 2);

//         } catch (error: unknown) {
//             console.error('DOA Dual Search Error:', error);
//             return JSON.stringify({
//                 error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤",
//                 message: error instanceof Error ? error.message : "Unknown error",
//                 searchQuery: query
//             });
//         }
//     },
//     {
//         name: "doaDualSearch",
//         description: `‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• DOA ‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö overview ‡πÅ‡∏•‡∏∞ detail:
//         - overview: ‡∏î‡∏π‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏£‡∏ß‡∏°‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
//         - detail: ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
//         - both: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö`,
//         schema: doaDualSearchSchema
//     }
// );


const doaDualSearchTool = tool(
    async ({ query, searchType, category, businessActivityNo }): Promise<string> => {
        try {
            console.log('üîç DOA Dual Search called with:', { query, searchType, category, businessActivityNo });

            let searchQuery = query;
            if (category) searchQuery += ` category:${category}`;
            if (businessActivityNo) searchQuery += ` No.:${businessActivityNo}`;

            // üß† Smart Logic: ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à searchType ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
            let finalSearchType = searchType;
            
            // ‡∏Ñ‡∏≥‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‚Üí ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ overview
            const broadKeywords = [
                '‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î', 'marketing', '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô', 'employee', '‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô', 'finance', 
                '‡∏ò‡∏∏‡∏£‡∏Å‡∏≤‡∏£', 'admin', '‡∏à‡∏±‡∏î‡∏ã‡∏∑‡πâ‡∏≠', 'procurement', '‡∏•‡∏á‡∏ó‡∏∏‡∏ô', 'investment',
                'logistics', 'shipping', '‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á', '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó', '‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà'
            ];
            
            // ‡∏Ñ‡∏≥‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ‚Üí detail ‡∏´‡∏£‡∏∑‡∏≠ both
            const specificKeywords = [
                '‡∏á‡∏≤‡∏ô‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏õ‡∏µ‡πÉ‡∏´‡∏°‡πà', 'new year', '‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', 'payroll', '‡∏ù‡∏∂‡∏Å‡∏≠‡∏ö‡∏£‡∏°', 'training',
                '‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á', 'travel', '‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û', 'insurance', '‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢', 'sick leave'
            ];

            const isGenericQuery = broadKeywords.some(keyword => 
                query.toLowerCase().includes(keyword.toLowerCase())
            );
            
            const isSpecificQuery = specificKeywords.some(keyword => 
                query.toLowerCase().includes(keyword.toLowerCase())
            );

            if (isGenericQuery && !isSpecificQuery) {
                finalSearchType = "overview";
                console.log('üéØ Detected generic query, using overview only');
            } else if (isSpecificQuery) {
                finalSearchType = "both";
                console.log('üéØ Detected specific query, using both');
            }

            const results: DOASearchResults = {
                searchQuery,
                searchType: finalSearchType,
                overview: null,
                details: null
            };

            // Step 1: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Overview (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
            if (finalSearchType === "overview" || finalSearchType === "both") {
                try {
                    const summaryRetriever = await getDOA_Main_Retriever();
                    const summaryDocs = await summaryRetriever.invoke(searchQuery);
                    
                    if (summaryDocs.length > 0) {
                        results.overview = {
                            found: true,
                            totalCategories: summaryDocs.length,
                            categories: summaryDocs.map(doc => ({
                                category: doc.metadata.Category || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
                                content: doc.pageContent,
                                totalItems: doc.metadata.totalItems || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
                            }))
                        };
                        console.log('üìä Found overview data:', results.overview.totalCategories, 'categories');
                    }
                } catch (error) {
                    console.error('Overview search error:', error);
                }
            }

            // Step 2: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Details (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
            if (finalSearchType === "detail" || finalSearchType === "both") {
                try {
                    const detailRetriever = await getDOARetriever();
                    const detailDocs = await detailRetriever.invoke(searchQuery);
                    
                    if (detailDocs.length > 0) {
                        results.details = {
                            found: true,
                            totalDetails: detailDocs.length,
                            items: detailDocs.map(doc => ({
                                no: doc.metadata["No."] || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
                                category: doc.metadata.Category || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
                                businessActivity: doc.metadata["Business Activity"] || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
                                content: doc.pageContent.substring(0, 800) + (doc.pageContent.length > 800 ? "..." : "")
                            }))
                        };
                        console.log('üìã Found detail data:', results.details.totalDetails, 'items');
                    }
                } catch (error) {
                    console.error('Detail search error:', error);
                }
            }

            // Step 3: ‡πÄ‡∏û‡∏¥‡πà‡∏° recommendation logic
            if (results.overview?.found && !results.details?.found) {
                return JSON.stringify({
                    ...results,
                    userGuidance: {
                        type: "category_selection",
                        message: "‡∏û‡∏ö‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:",
                        nextAction: "‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥"
                    }
                }, null, 2);
            }

            // ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            if (!results.overview?.found && !results.details?.found) {
                return JSON.stringify({
                    message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤",
                    searchQuery: searchQuery,
                    suggestions: [
                        "‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô ‡πÄ‡∏ä‡πà‡∏ô 'employee', 'training', 'payroll'",
                        "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏∞‡∏Å‡∏î‡∏Ñ‡∏≥",
                        "‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏ó‡∏¢"
                    ]
                });
            }

            return JSON.stringify(results, null, 2);

        } catch (error: unknown) {
            console.error('DOA Dual Search Error:', error);
            return JSON.stringify({
                error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤",
                message: error instanceof Error ? error.message : "Unknown error",
                searchQuery: query
            });
        }
    },
    {
        name: "doaDualSearch",
        description: `‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• DOA ‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞:
        - ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÜ ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        - ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏ï‡πá‡∏°
        - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©`,
        schema: doaDualSearchSchema
    }
);

export { doaDualSearchTool };