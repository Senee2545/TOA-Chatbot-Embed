'use client'

import React, { useState } from 'react'

interface EmbedSettings {
  width: string
  height: string
  bgColor: string
  textColor: string
  buttonColor: string
  borderRadius: string
  dataSource: string
}

interface EmbedFormProps {
  settings: EmbedSettings
  onSettingsChange: (settings: EmbedSettings) => void
}

export default function EmbedForm({ settings, onSettingsChange }: EmbedFormProps) {
  const [saved, setSaved] = useState(false)

  // ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  const dataSources = [
    { 
      id: 'chat5', 
      name: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£', 
      description: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ‡πÅ‡∏•‡∏∞‡πÅ‡∏ú‡∏ô‡∏Å‡∏ï‡πà‡∏≤‡∏á‡πÜ',
      icon: 'üìã'
    },
    { 
      id: 'chat8', 
      name: '‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢', 
      description: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£',
      icon: 'üë•'
    },
    { 
      id: 'DOA-chat', 
      name: 'DOA', 
      description: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏öApproval',
      icon: 'üìë'
    },
  ]

  const handleChange = (key: keyof EmbedSettings, value: string) => {
    const newSettings = { ...settings, [key]: value }
    onSettingsChange(newSettings)
  }

  const handleSaveSettings = async () => {
    // TODO: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡∏á database
    // try {
    //   await fetch('/api/settings', {
    //     method: 'POST',
    //     headers: { 'Content-Type': 'application/json' },
    //     body: JSON.stringify(settings)
    //   })
    //   setSaved(true)
    //   setTimeout(() => setSaved(false), 2000)
    // } catch (error) {
    //   alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å')
    // }
    setSaved(true)
    setTimeout(() => setSaved(false), 2000)
  }

  const presetColors = [
    { name: 'Blue', bg: '#ffffff', text: '#1f2937', button: '#3b82f6' },
    { name: 'Green', bg: '#f0fdf4', text: '#1f2937', button: '#22c55e' },
    { name: 'Purple', bg: '#faf5ff', text: '#1f2937', button: '#a855f7' },
    { name: 'Red', bg: '#fef2f2', text: '#1f2937', button: '#ef4444' },
    { name: 'Dark', bg: '#bbbcbe', text: '#1f2937', button: '#2a2c92' },
  ]

  const applyPreset = (preset: typeof presetColors[0]) => {
    const newSettings = {
      ...settings,
      bgColor: preset.bg,
      textColor: preset.text,
      buttonColor: preset.button,
    }
    onSettingsChange(newSettings)
  }

  return (
    <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
      {/* Header */}
      <div className="bg-gradient-to-r from-blue-50 to-purple-50 px-6 py-4 border-b">
        <h2 className="text-xl font-semibold text-gray-800 flex items-center">
          <span className="text-2xl mr-2">‚öôÔ∏è</span>
          ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        </h2>
        <p className="text-sm text-gray-600 mt-1">
          ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
        </p>
      </div>

      <div className="p-6 space-y-6">

        {/* ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-3">
            üóÑÔ∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          </label>
          <div className="space-y-3">
            {dataSources.map((source) => (
              <label
                key={source.id}
                className={`flex items-start p-4 border-2 rounded-lg cursor-pointer transition-all duration-200 hover:bg-gray-50 ${
                  settings.dataSource === source.id
                    ? 'border-blue-500 bg-blue-50 ring-2 ring-blue-200'
                    : 'border-gray-200 hover:border-gray-300'
                }`}
              >
                <input
                  type="radio"
                  name="dataSource"
                  value={source.id}
                  checked={settings.dataSource === source.id}
                  onChange={(e) => handleChange('dataSource', e.target.value)}
                  className="mt-1 mr-3 text-blue-600 focus:ring-blue-500"
                />
                <div className="flex-1">
                  <div className="flex items-center space-x-2">
                    <span className="text-lg">{source.icon}</span>
                    <span className="font-medium text-gray-900">{source.name}</span>
                    {settings.dataSource === source.id && (
                      <span className="bg-blue-500 text-white text-xs px-2 py-1 rounded-full">
                        ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß
                      </span>
                    )}
                  </div>
                  <p className="text-sm text-gray-600 mt-1">
                    {source.description}
                  </p>
                </div>
              </label>
            ))}
          </div>
        </div>

        {/* Color Presets */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-3">
            üé® ‡∏ò‡∏µ‡∏°‡∏™‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ
          </label>
          <div className="grid grid-cols-2 sm:grid-cols-5 gap-2">
            {presetColors.map((preset) => (
              <button
                key={preset.name}
                onClick={() => applyPreset(preset)}
                className="group relative p-2 rounded-lg border-2 border-gray-200 hover:border-gray-300 transition-all duration-200 hover:scale-105 bg-white hover:bg-gray-50"
                title={`‡∏ò‡∏µ‡∏° ${preset.name}`}
              >
                <div className="flex items-center space-x-1">
                  <div 
                    className="w-4 h-4 rounded border"
                    style={{ backgroundColor: preset.bg }}
                  />
                  <div 
                    className="w-4 h-4 rounded border"
                    style={{ backgroundColor: preset.button }}
                  />
                </div>
                <div className="text-xs text-gray-600 mt-1 group-hover:text-gray-800">
                  {preset.name}
                </div>
              </button>
            ))}
          </div>
        </div>

        {/* ‡∏Ç‡∏ô‡∏≤‡∏î */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-3">
            üìê ‡∏Ç‡∏ô‡∏≤‡∏î
          </label>
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <div>
              <label className="block text-xs font-medium text-gray-500 mb-2">
                ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á (px)
              </label>
              <input
                type="number"
                value={settings.width}
                onChange={(e) => handleChange('width', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
                min="200"
                max="800"
                placeholder="400"
              />
            </div>
            <div>
              <label className="block text-xs font-medium text-gray-500 mb-2">
                ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á (px)
              </label>
              <input
                type="number"
                value={settings.height}
                onChange={(e) => handleChange('height', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
                min="300"
                max="800"
                placeholder="600"
              />
            </div>
          </div>
        </div>

        {/* ‡∏™‡∏µ */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-3">
            üé® ‡∏™‡∏µ‡πÅ‡∏•‡∏∞‡∏ò‡∏µ‡∏°
          </label>
          <div className="space-y-4">
            {/* ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á */}
            <div>
              <label className="block text-xs font-medium text-gray-500 mb-2">
                ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
              </label>
              <div className="flex items-center space-x-3">
                <input
                  type="color"
                  value={settings.bgColor}
                  onChange={(e) => handleChange('bgColor', e.target.value)}
                  className="w-12 h-10 border border-gray-300 rounded-lg cursor-pointer"
                />
                <input
                  type="text"
                  value={settings.bgColor}
                  onChange={(e) => handleChange('bgColor', e.target.value)}
                  className="flex-1 px-3 py-2 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="#ffffff"
                />
              </div>
            </div>
            
            {/* ‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° */}
            <div>
              <label className="block text-xs font-medium text-gray-500 mb-2">
                ‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
              </label>
              <div className="flex items-center space-x-3">
                <input
                  type="color"
                  value={settings.textColor}
                  onChange={(e) => handleChange('textColor', e.target.value)}
                  className="w-12 h-10 border border-gray-300 rounded-lg cursor-pointer"
                />
                <input
                  type="text"
                  value={settings.textColor}
                  onChange={(e) => handleChange('textColor', e.target.value)}
                  className="flex-1 px-3 py-2 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="#000000"
                />
              </div>
            </div>
            
            {/* ‡∏™‡∏µ‡∏õ‡∏∏‡πà‡∏° */}
            <div>
              <label className="block text-xs font-medium text-gray-500 mb-2">
                ‡∏™‡∏µ‡∏õ‡∏∏‡πà‡∏°
              </label>
              <div className="flex items-center space-x-3">
                <input
                  type="color"
                  value={settings.buttonColor}
                  onChange={(e) => handleChange('buttonColor', e.target.value)}
                  className="w-12 h-10 border border-gray-300 rounded-lg cursor-pointer"
                />
                <input
                  type="text"
                  value={settings.buttonColor}
                  onChange={(e) => handleChange('buttonColor', e.target.value)}
                  className="flex-1 px-3 py-2 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="#007bff"
                />
              </div>
            </div>
          </div>
        </div>

        {/* ‡∏°‡∏∏‡∏°‡πÇ‡∏Ñ‡πâ‡∏á */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-3">
            üì± ‡∏°‡∏∏‡∏°‡πÇ‡∏Ñ‡πâ‡∏á
          </label>
          <div className="space-y-2">
            <input
              type="range"
              min="0"
              max="20"
              value={settings.borderRadius}
              onChange={(e) => handleChange('borderRadius', e.target.value)}
              className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider"
            />
            <div className="flex justify-between text-xs text-gray-500">
              <span>‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°</span>
              <span className="font-medium text-blue-600">
                {settings.borderRadius}px
              </span>
              <span>‡∏°‡∏ô</span>
            </div>
          </div>
        </div>

        {/* Save Button */}
        <button
          onClick={handleSaveSettings}
          className={`w-full py-3 px-4 rounded-lg font-medium transition-all duration-200 transform hover:scale-105 ${
            saved
              ? 'bg-green-500 text-white'
              : 'bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white shadow-md'
          }`}
        >
          {saved ? '‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢' : 'üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤'}
        </button>
      </div>
    </div>
  )
}