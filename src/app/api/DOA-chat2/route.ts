// app/api/chat/route.ts
import { NextRequest, NextResponse } from "next/server";
import { ChatOpenAI } from "@langchain/openai";
import { ChatPromptTemplate, MessagesPlaceholder } from "@langchain/core/prompts";
import { RunnableWithMessageHistory } from "@langchain/core/runnables";
import { PostgresChatMessageHistory } from "@langchain/community/stores/message/postgres";
import pg from "pg";
import { createClient } from "@/lib/supabase/server";
import { getDOARetriever } from "@/lib/doa_retriever";
import { getDOA_Main_Retriever } from "@/lib/doa_main_retriever";
import { z } from "zod";
import crypto from "crypto";

/** =========================
 *  1) Config & Singletons
 *  ========================= */
// ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á pg.Pool ‡∏ï‡πà‡∏≠ request ‚Üí ‡πÉ‡∏ä‡πâ module-scope singleton
const pool = new pg.Pool({
  host: process.env.PG_HOST,
  port: Number(process.env.PG_PORT),
  user: process.env.PG_USER,
  password: process.env.PG_PASSWORD,
  database: process.env.PG_DATABASE,
  // ‡πÑ‡∏•‡πà timeout ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö serverless (‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ)
  max: 5,
  idleTimeoutMillis: 10_000,
  connectionTimeoutMillis: 5_000,
});

// ‡∏™‡∏£‡πâ‡∏≤‡∏á ChatOpenAI ‡πÑ‡∏ß‡πâ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÇ‡∏°‡∏î‡∏π‡∏• (‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢/‡πÑ‡∏°‡πà‡∏°‡∏µ per-user state)
const model = new ChatOpenAI({
  model: "gpt-4o-mini",
  temperature: 0,
  maxTokens: 1500,
  cache: true,
});

// Zod schema ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö body
const BodySchema = z.object({
  messages: z
    .array(
      z.object({


        role: z.enum(["user", "assistant", "system"]).optional(),
        content: z.string(),
      })
    )
    .default([]),
  sessionId: z.string().optional(),
});

// type message ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á
type ChatMessage = z.infer<typeof BodySchema>["messages"][number];

/** =========================
 *  2) Utilities
 *  ========================= */

// ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß context ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô prompt ‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô/ token ‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î)
function clampText(input: string, maxChars: number) {
  if (input.length <= maxChars) return input;
  // ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ï‡πâ‡∏ô‡∏ó‡πâ‡∏≤‡∏¢‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢
  const head = Math.floor(maxChars * 0.6);
  const tail = Math.floor(maxChars * 0.3);
  return `${input.slice(0, head)}\n...\n${input.slice(-tail)}`;
}

function sanitizeCurlyBraces(input: string) {
  return input.replace(/[{}]/g, "");
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ sessionId ‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£
function resolveSessionId(opts: {
  userId?: string;
  current?: string;
}): { sessionId: string; isNew: boolean; updated: boolean } {
  const { userId, current } = opts;

  // ‡∏°‡∏µ user ‚Üí ‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö userId (‡∏¢‡∏∑‡∏ô‡∏¢‡∏≤‡∏ß)
  if (userId) {
    const updated = current !== userId;
    return { sessionId: userId, isNew: false, updated };
  }

  // anonymous ‚Üí ‡πÉ‡∏ä‡πâ widget_* + ‡∏≠‡∏≤‡∏¢‡∏∏ 1 ‡∏ß‡∏±‡∏ô
  const ONE_DAY = 86_400_000;
  if (current && current.startsWith("widget_")) {
    const [, tsBase36] = current.split("_");
    const ts = parseInt(tsBase36 || "0", 36);
    if (Number.isFinite(ts) && Date.now() - ts < ONE_DAY) {
      return { sessionId: current, isNew: false, updated: false };
    }
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
  const timestamp = Date.now().toString(36);
  const rand = crypto.randomBytes(8).toString("base64url");
  const sessionId = `widget_${timestamp}_${rand}`;
  return { sessionId, isNew: true, updated: true };
}

// ‡∏´‡πà‡∏≠ history ‡∏î‡πâ‡∏ß‡∏¢ singleton pool
function getHistory(sessionId: string) {
  return new PostgresChatMessageHistory({
    sessionId,
    tableName: "langchain_chat_history",
    pool,
  });
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≥‡∏û‡πâ‡∏≠‡∏á (synonyms) ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
const SYNONYM_SETS = [
  {
    triggers: ["‡∏≠‡∏ö‡∏£‡∏°", "‡∏ù‡∏∂‡∏Å‡∏≠‡∏ö‡∏£‡∏°", "‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°", "‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏≠‡∏ö‡∏£‡∏°", "training", "l&d"],
    expand: [
      "training",
      "training expenses",
    ],
  },
   {
    triggers: ["‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á","‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å","‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á","per diem","reimbursement"],
    expand: [
      "Reimbursement for Per Diem",
      "Lodging and Travelling expenses",
    ],
  },
];

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢ synonyms
function expandWithSynonyms(q: string) {
  const lc = (q ?? "").toLowerCase();
  const bag = new Set<string>();
  for (const set of SYNONYM_SETS) {
    if (set.triggers.some((t) => lc.includes(t))) {
      set.expand.forEach((e) => bag.add(e));
    }
  }
  if (bag.size === 0) return q;
  return `${q} ${Array.from(bag).join(" ")}`;
}

/** =========================
 *  3) Route Handler
 *  ========================= */

export async function POST(req: NextRequest) {
  try {
    // 3.1 ‡∏ï‡∏£‡∏ß‡∏à auth
    const supabase = await createClient();
    const { data: authData } = await supabase.auth.getUser();
    const userId = authData.user?.id;

    // 3.2 parse body (validate)
    const raw = await req.json();
    const body = BodySchema.parse(raw);
    const messages: ChatMessage[] = body.messages;

    // 3.3 resolve session
    const { sessionId, isNew, updated } = resolveSessionId({
      userId,
      current: body.sessionId,
    });

    // Greeting (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏•‡∏¢)
    if (messages.length === 0) {
      return NextResponse.json({
        content: `DOA Chatbot ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ (DOA Cash)
‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ

1. EMPLOYEE BENEFITS ‡∏ú‡∏•‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
2. GENERAL ADMIN EXPENSES ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ò‡∏∏‡∏£‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
3. FINANCE & ACCOUNTING ‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
4. SALES & MARKETING EXPENSES ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î
5. CAPEX INVESTMENT (Purchase/Rent/Lease) ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≤‡∏á‡πÜ (‡∏ã‡∏∑‡πâ‡∏≠/‡πÄ‡∏ä‡πà‡∏≤/‡πÄ‡∏ä‡πà‡∏≤‡∏ã‡∏∑‡πâ‡∏≠)
6. PROCUREMENT ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏±‡∏î‡∏à‡πâ‡∏≤‡∏á
7. SUPPLY & FG REQUISITION (LOGISTICS) ‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡∏à‡πà‡∏≤‡∏¢‡∏û‡∏±‡∏™‡∏î‡∏∏‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ (Logistics)
8. IMPORT & EXPORT (SHIPPING) ‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (Shipping)
9. LOAN TO OR BETWEEN SUBSIDIARY COMPANY ‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°‡πÅ‡∏Å‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏¢‡πà‡∏≠‡∏¢
10. CORPORATE DOCUMENTS COMMUNICATED TO OUTSIDERS ‡∏Å‡∏≤‡∏£‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å

‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: https://doa.toagroup.com/doa`,
        type: "text",
        timestamp: new Date().toISOString(),
        sessionId,
        isNewSession: isNew,
        sessionUpdated: updated,
      });
    }

    const lastUserMessage = messages[messages.length - 1]?.content ?? "";

    const expandedQuestion = expandWithSynonyms(lastUserMessage);
    if (expandedQuestion !== lastUserMessage) {
      console.log("Expanded with synonyms:", expandedQuestion);
    }
    console.log("Expanded with synonyms:", expandedQuestion);

    /** 3.4 RAG: ‡∏î‡∏∂‡∏á context (‡∏•‡∏î await ‡∏ã‡πâ‡∏≥ ‡πÜ, ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏ô‡∏≤‡∏ô) */
    const [doaRetriever, doaMainRetriever] = await Promise.all([
      getDOARetriever(),
      getDOA_Main_Retriever(),
    ]);


    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å parallel
    const [docs, mainDocs] = await Promise.all([
      doaRetriever.invoke(expandedQuestion),
      doaMainRetriever.invoke(expandedQuestion),
    ]);
    console.log("üîç Retrieved docs:", docs);
    console.log("üîç Retrieved main docs:", mainDocs);
    

    // üîß ‡∏™‡∏£‡πâ‡∏≤‡∏á context ‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏° content + metadata ‡πÅ‡∏ï‡πà‡∏•‡∏∞ doc
    const processedDocs = docs.slice(0, 5).map(doc => ({
      content: sanitizeCurlyBraces(clampText(doc.pageContent, 2000)),
      metadata: {
        no: doc.metadata["No."] || "",
        category: doc.metadata["Category"] || "",
        businessActivity: doc.metadata["Business Activity"] || "",
        group: doc.metadata["group"] || "",
        remarks: doc.metadata["remarks"] || "",
        formUrl: doc.metadata["form_url"] || "",
        coApproval: doc.metadata["co_approval"] || "",
        approvalDetails: doc.metadata["approval_details"] || {},
        subGroup: doc.metadata["sub group"] || "",
        note: doc.metadata["note"] || ""
      }
    }));


    // üîß ‡∏™‡∏£‡πâ‡∏≤‡∏á detailed context ‡∏ó‡∏µ‡πà content + metadata ‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô
    const ctxDetail = processedDocs.map(doc => {
      let contextText = `--- ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà ${doc.metadata.no} ---\n`;
      contextText += `‡∏´‡∏°‡∏ß‡∏î: ${doc.metadata.category}\n`;
      contextText += `‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°: ${doc.metadata.businessActivity}\n`;
      contextText += `‡∏Å‡∏•‡∏∏‡πà‡∏°: ${doc.metadata.group}\n`;
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
      if (doc.metadata.approvalDetails && Object.keys(doc.metadata.approvalDetails).length > 0) {
        contextText += `\n‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥:\n`;
        Object.entries(doc.metadata.approvalDetails).forEach(([position, authority]) => {
          if (authority && authority !== "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏" && authority.toString().trim() !== "") {
            contextText += `‚Ä¢ ${position}: ${authority}\n`;
          }
        });
      }
      
      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
      if (doc.metadata.coApproval && doc.metadata.coApproval !== "‡πÑ‡∏°‡πà‡∏°‡∏µ") {
        contextText += `Co Approval: ${doc.metadata.coApproval}\n`;
      }
      if (doc.metadata.remarks && doc.metadata.remarks !== "‡πÑ‡∏°‡πà‡∏°‡∏µ" && doc.metadata.remarks !== "-") {
        contextText += `‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ${doc.metadata.remarks}\n`;
      }
      if (doc.metadata.formUrl && doc.metadata.formUrl !== "-" && doc.metadata.formUrl !== "‡πÑ‡∏°‡πà‡∏°‡∏µ") {
        contextText += `Form URL: ${doc.metadata.formUrl}\n`;
      }
      if (doc.metadata.note && doc.metadata.note !== "-" && doc.metadata.note !== "‡πÑ‡∏°‡πà‡∏°‡∏µ") {
        contextText += `Note: ${doc.metadata.note}\n`;
      }
      
      contextText += `\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${doc.content}\n`;
      return contextText;
    }).join("\n\n");

    // Main context (‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°)
    const ctxMain = sanitizeCurlyBraces(
      clampText(mainDocs.map(d => d.pageContent).join("\n\n"), 8_000)
    );

    // Sanitize final context
    const finalCtxDetail = sanitizeCurlyBraces(clampText(ctxDetail, 12_000));

    // ‡∏•‡∏î noisy log + ‡πÑ‡∏°‡πà log ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß)
    // if (process.env.NODE_ENV !== "production") {
    //   console.log("üîë sessionId:", sessionId);
    //   console.log("üîé query:", lastUserMessage.slice(0, 200));
    //   console.log("üìÑ ctxDetailLen:", finalCtxDetail.length, "ctxMainLen:", ctxMain.length);
    //   console.log("üìã processedDocs count:", processedDocs.length);
    //   console.log("üîç sample doc metadata:", processedDocs[0]?.metadata?.no ? {
    //     no: processedDocs[0].metadata.no,
    //     category: processedDocs[0].metadata.category.substring(0, 50)
    //   } : "No metadata");
    // }

    /** 3.5 Prompt */
    const SYSTEM_PROMPT = `
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ AI Chatbot ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ (DOA Cash)  

‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 2 ‡∏ä‡∏∏‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°:  
- ‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà 1 = ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏•‡∏±‡∏Å/‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°: ${ctxMain}  
- ‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà 2 = ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î (‡∏£‡∏ß‡∏° metadata ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£): ${finalCtxDetail}  

## ‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö:
1. ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà 2 ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ metadata ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
2. ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ (No.) ‡πÄ‡∏™‡∏°‡∏≠ ‡πÄ‡∏ä‡πà‡∏ô "‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ 1.1 ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥..."
3. ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÉ‡∏ô metadata ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£

‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö:
- ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏•‡∏±‡∏Å ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏•‡∏Ç No.
- ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ (‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å metadata)
- ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
- co_approval (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)  
- Form URL (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
- Note (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)


`.trim();

    const prompt = ChatPromptTemplate.fromMessages([
      ["system", SYSTEM_PROMPT],
      new MessagesPlaceholder("history"),
      ["user", "{input}"],
    ]);

    const chain = prompt.pipe(model);

    const chainWithHistory = new RunnableWithMessageHistory({
      runnable: chain,
      getMessageHistory: (sid) => getHistory(sid),
      inputMessagesKey: "input",
      historyMessagesKey: "history",
    });

    /** 3.6 Invoke LLM */
    const response = await chainWithHistory.invoke(
      { input: lastUserMessage },
      { configurable: { sessionId } }
    );

    // üîß ‡πÅ‡∏¢‡∏Å‡πÄ‡∏≠‡∏≤ USED_DOC ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å response
    const responseContent = response.content.toString();
    const usedDocMatch = responseContent.match(/\[USED_DOC:\s*([^\]]+)\]/);
    const usedDocNo = usedDocMatch ? usedDocMatch[1].trim() : null;
    
    // ‡∏•‡∏ö [USED_DOC: ...] ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const cleanContent = responseContent.replace(/\[USED_DOC:[^\]]+\]/g, '').trim();
    
    // ‡∏´‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å usedDocNo
    const usedDoc = usedDocNo ? 
      processedDocs.find(doc => doc.metadata.no === usedDocNo) : 
      processedDocs[0];

    console.log("üéØ AI used document:", usedDocNo || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏");

    return NextResponse.json({
      content: cleanContent,
      type: "text",
      timestamp: new Date().toISOString(),
      sessionId,
      isNewSession: isNew,
      sessionUpdated: updated,
      // üîß ‡∏™‡πà‡∏á metadata ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà AI ‡πÉ‡∏ä‡πâ‡∏ï‡∏≠‡∏ö‡∏à‡∏£‡∏¥‡∏á
      metadata: {
        usedDocument: usedDoc ? {
          no: usedDoc.metadata.no,
          category: usedDoc.metadata.category,
          businessActivity: usedDoc.metadata.businessActivity,
          group: usedDoc.metadata.group,
          remarks: usedDoc.metadata.remarks,
          formUrl: usedDoc.metadata.formUrl,
          coApproval: usedDoc.metadata.coApproval,
          approvalDetails: usedDoc.metadata.approvalDetails,
          subGroup: usedDoc.metadata.subGroup,
          note: usedDoc.metadata.note
        } : null,
        searchQuery: lastUserMessage,
        totalDocuments: docs.length,
        usedDocNo: usedDocNo
      }
    });

  } catch (err) {
    console.error("LLM/Route Error:", err);
    return NextResponse.json(
      {
        content: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        type: "error",
        timestamp: new Date().toISOString(),
      },
      { status: 500 }
    );
  }
}