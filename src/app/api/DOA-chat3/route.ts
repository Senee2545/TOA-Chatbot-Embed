// app/api/chat/route.ts
import { NextRequest, NextResponse } from "next/server";
import { ChatOpenAI } from "@langchain/openai";
import { ChatPromptTemplate, MessagesPlaceholder } from "@langchain/core/prompts";
import { RunnableWithMessageHistory } from "@langchain/core/runnables";
import { PostgresChatMessageHistory } from "@langchain/community/stores/message/postgres";
import pg from "pg";
import { createClient } from "@/lib/supabase/server";

import { getDOA_Main_Retriever } from "@/lib/doa_main_retriever";
import { getDOARetrieverNew } from "@/lib/doa_new_retriever";
import { z } from "zod";
import crypto from "crypto";

/** =========================
 *  1) Config & Singletons
 *  ========================= */
// ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á pg.Pool ‡∏ï‡πà‡∏≠ request ‚Üí ‡πÉ‡∏ä‡πâ module-scope singleton
const pool = new pg.Pool({
  host: process.env.PG_HOST,
  port: Number(process.env.PG_PORT),
  user: process.env.PG_USER,
  password: process.env.PG_PASSWORD,
  database: process.env.PG_DATABASE,
  // ‡πÑ‡∏•‡πà timeout ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö serverless (‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ)
  max: 5,
  idleTimeoutMillis: 10_000,
  connectionTimeoutMillis: 5_000,
});

// ‡∏™‡∏£‡πâ‡∏≤‡∏á ChatOpenAI ‡πÑ‡∏ß‡πâ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÇ‡∏°‡∏î‡∏π‡∏• (‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢/‡πÑ‡∏°‡πà‡∏°‡∏µ per-user state)
const model = new ChatOpenAI({
  model: "gpt-4o-mini",
  temperature: 0.3,
  maxTokens: 1500,
  cache: true,
});

// Zod schema ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö body
const BodySchema = z.object({
  messages: z
    .array(
      z.object({


        role: z.enum(["user", "assistant", "system"]).optional(),
        content: z.string(),
      })
    )
    .default([]),
  sessionId: z.string().optional(),
});

// type message ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á
type ChatMessage = z.infer<typeof BodySchema>["messages"][number];

/** =========================
 *  2) Utilities
 *  ========================= */

// ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß context ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô prompt ‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô/ token ‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î)
function clampText(input: string, maxChars: number) {
  if (input.length <= maxChars) return input;
  // ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ï‡πâ‡∏ô‡∏ó‡πâ‡∏≤‡∏¢‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢
  const head = Math.floor(maxChars * 0.6);
  const tail = Math.floor(maxChars * 0.3);
  return `${input.slice(0, head)}\n...\n${input.slice(-tail)}`;
}

function sanitizeCurlyBraces(input: string) {
  return input.replace(/[{}]/g, "");
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ sessionId ‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£
function resolveSessionId(opts: {
  userId?: string;
  current?: string;
}): { sessionId: string; isNew: boolean; updated: boolean } {
  const { userId, current } = opts;

  // ‡∏°‡∏µ user ‚Üí ‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö userId (‡∏¢‡∏∑‡∏ô‡∏¢‡∏≤‡∏ß)
  if (userId) {
    const updated = current !== userId;
    return { sessionId: userId, isNew: false, updated };
  }

  // anonymous ‚Üí ‡πÉ‡∏ä‡πâ widget_* + ‡∏≠‡∏≤‡∏¢‡∏∏ 1 ‡∏ß‡∏±‡∏ô
  const ONE_DAY = 86_400_000;
  if (current && current.startsWith("widget_")) {
    const [, tsBase36] = current.split("_");
    const ts = parseInt(tsBase36 || "0", 36);
    if (Number.isFinite(ts) && Date.now() - ts < ONE_DAY) {
      return { sessionId: current, isNew: false, updated: false };
    }
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
  const timestamp = Date.now().toString(36);
  const rand = crypto.randomBytes(8).toString("base64url");
  const sessionId = `widget_${timestamp}_${rand}`;
  return { sessionId, isNew: true, updated: true };
}

// ‡∏´‡πà‡∏≠ history ‡∏î‡πâ‡∏ß‡∏¢ singleton pool
function getHistory(sessionId: string) {
  return new PostgresChatMessageHistory({
    sessionId,
    tableName: "langchain_chat_history",
    pool,
  });
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≥‡∏û‡πâ‡∏≠‡∏á (synonyms) ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
const SYNONYM_SETS = [
  {
    triggers: ["‡∏≠‡∏ö‡∏£‡∏°", "‡∏ù‡∏∂‡∏Å‡∏≠‡∏ö‡∏£‡∏°", "‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°", "‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏≠‡∏ö‡∏£‡∏°", "training", "l&d"],
    expand: [
      "training",
      "training expenses",
    ],
  },
   {
    triggers: ["‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏î‡∏£‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢","‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏î‡∏•‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢","‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤","‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏î‡∏£‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢","‡πÄ‡∏ö‡∏¥‡∏Å‡∏ó‡∏î‡∏•‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢","‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏î‡∏•‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢"],
    expand: [ 
      "Advance payment and clearing",
      "Overseas trip",
      "Domestic activity",
      "Sales & Marketing activity"


    ],
    
  },
  {
    triggers: ["‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏î‡∏£‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡∏†‡∏≤‡∏©‡∏µ‡∏≠‡∏≤‡∏Å‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤","‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏î‡∏£‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡∏†‡∏≤‡∏©‡∏µ‡∏≠‡∏≤‡∏Å‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤","‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏î‡∏£‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡∏†‡∏≤‡∏©‡∏µ‡∏≠‡∏≤‡∏Å‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤","‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏î‡∏£‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡∏†‡∏≤‡∏©‡∏µ‡∏≠‡∏≤‡∏Å‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤","‡∏ó‡∏î‡∏£‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡∏†‡∏≤‡∏©‡∏µ‡∏≠‡∏≤‡∏Å‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤","‡∏ó‡∏î‡∏£‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡∏†‡∏≤‡∏©‡∏µ‡∏≠‡∏≤‡∏Å‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"],
    expand: [ 
      "Advance payment for import and export taxes",
    ],
    
  },
  {
    triggers: ['‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡∏™‡∏µ',"‡∏™‡∏µ‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ","‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏Å‡∏∏‡∏®‡∏•","‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó"],
    expand: [ 
      "Company's Finished Goods (FG) Donation",
      "FG (Re-Condition)",
      "Normal FG",
    ],
    
  },
  {
    triggers: ['‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ',"‡∏Ñ‡πà‡∏≤‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô","‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏î‡πâ‡∏≤‡∏ô CSR","‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢CSR"],
    expand: [ 
      "Donation",
      "Sponsorship",
      "CSR Expenses",
    ],
    
  },
];

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢ synonyms
function expandWithSynonyms(q: string) {
  const lc = (q ?? "").toLowerCase();
  const bag = new Set<string>();
  for (const set of SYNONYM_SETS) {
    if (set.triggers.some((t) => lc.includes(t))) {
      set.expand.forEach((e) => bag.add(e));
    }
  }
  if (bag.size === 0) return q;
  return `${q} ${Array.from(bag).join(" ")}`;
}

/** =========================
 *  3) Route Handler
 *  ========================= */

export async function POST(req: NextRequest) {
  try {
    // 3.1 ‡∏ï‡∏£‡∏ß‡∏à auth
    const supabase = await createClient();
    const { data: authData } = await supabase.auth.getUser();
    const userId = authData.user?.id;

    // 3.2 parse body (validate)
    const raw = await req.json();
    const body = BodySchema.parse(raw);
    const messages: ChatMessage[] = body.messages;

    // 3.3 resolve session
    const { sessionId, isNew, updated } = resolveSessionId({
      userId,
      current: body.sessionId,
    });

    // Greeting (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏•‡∏¢)
    if (messages.length === 0) {
      return NextResponse.json({
        content: `DOA Chatbot ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ (DOA Cash)
        ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ
        1. EMPLOYEE BENEFITS ‡∏ú‡∏•‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
        2. GENERAL ADMIN EXPENSES ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ò‡∏∏‡∏£‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
        3. FINANCE & ACCOUNTING ‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
        4. SALES & MARKETING EXPENSES ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î
        5. CAPEX INVESTMENT (Purchase/Rent/Lease) ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≤‡∏á‡πÜ (‡∏ã‡∏∑‡πâ‡∏≠/‡πÄ‡∏ä‡πà‡∏≤/‡πÄ‡∏ä‡πà‡∏≤‡∏ã‡∏∑‡πâ‡∏≠)
        6. PROCUREMENT ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏±‡∏î‡∏à‡πâ‡∏≤‡∏á
        7. SUPPLY & FG REQUISITION (LOGISTICS) ‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡∏à‡πà‡∏≤‡∏¢‡∏û‡∏±‡∏™‡∏î‡∏∏‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ (Logistics)
        8. IMPORT & EXPORT (SHIPPING) ‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (Shipping)
        9. LOAN TO OR BETWEEN SUBSIDIARY COMPANY ‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°‡πÅ‡∏Å‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏¢‡πà‡∏≠‡∏¢
        10. CORPORATE DOCUMENTS COMMUNICATED TO OUTSIDERS ‡∏Å‡∏≤‡∏£‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å
        ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: https://doa.toagroup.com/doa`,
        type: "text",
        timestamp: new Date().toISOString(),
        sessionId,
        isNewSession: isNew,
        sessionUpdated: updated,
      });
    }

    const lastUserMessage = messages[messages.length - 1]?.content ?? "";

    const expandedQuestion = expandWithSynonyms(lastUserMessage);
    if (expandedQuestion !== lastUserMessage) {
      console.log("Expanded with synonyms:", expandedQuestion);
    }
    console.log("Expanded with synonyms:", expandedQuestion);

    /** 3.4 RAG: ‡∏î‡∏∂‡∏á context (‡∏•‡∏î await ‡∏ã‡πâ‡∏≥ ‡πÜ, ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏ô‡∏≤‡∏ô) */
    const [ doaMainRetriever, doaRetrieverNew] = await Promise.all([
      getDOA_Main_Retriever(),
      getDOARetrieverNew()
    ]);


    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å parallel
    const [ mainDocs, docsNew] = await Promise.all([
      doaMainRetriever.invoke(expandedQuestion),
      doaRetrieverNew.invoke(expandedQuestion),
    ]);
    console.log("üîç Retrieved docs:", docsNew);
 
    

    
    const ctxDetail = docsNew
    .map((d) => {
      
      return [
        d.pageContent,
        // `META: ${JSON.stringify({
        //   no: meta?.no,
        //   topic: meta?.topic,
        //   group: meta?.group,
        //   sub_group: meta?.sub_group,
        //   co_approval: meta?.co_approval,
        //   approval_details: meta?.approval_details,
        //   remarks: meta?.remarks,
        //   sheet: meta?.sheet,
        //   source: meta?.source,
        //   form_url: meta?.form_url,
        // })}`,
      ].join("\n");
    })
    .join("\n\n---\n\n");

    // üîß ‡∏™‡∏£‡πâ‡∏≤‡∏á detailed context ‡∏ó‡∏µ‡πà content + metadata ‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô
  

    // Main context (‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°)
    const ctxMain = sanitizeCurlyBraces(
      clampText(mainDocs.map(d => d.pageContent).join("\n\n"), 8_000)
    );

    // Sanitize final context
    const finalCtxDetail = sanitizeCurlyBraces(clampText(ctxDetail, 12_000));

    // ‡∏•‡∏î noisy log + ‡πÑ‡∏°‡πà log ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß)
    // if (process.env.NODE_ENV !== "production") {
    //   console.log("üîë sessionId:", sessionId);
    //   console.log("üîé query:", lastUserMessage.slice(0, 200));
    //   console.log("üìÑ ctxDetailLen:", finalCtxDetail.length, "ctxMainLen:", ctxMain.length);
    //   console.log("üìã processedDocs count:", processedDocs.length);
    //   console.log("üîç sample doc metadata:", processedDocs[0]?.metadata?.no ? {
    //     no: processedDocs[0].metadata.no,
    //     category: processedDocs[0].metadata.category.substring(0, 50)
    //   } : "No metadata");
    // }

    /** 3.5 Prompt */
    const SYSTEM_PROMPT = `
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ AI Chatbot ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô **‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ (DOA Cash)**  
## Context
- ‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà 1 = ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°/‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏•‡∏±‡∏Å: """${ctxMain}"""
- ‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà 2 = ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: """${finalCtxDetail}"""  
## ‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö:
1. ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ä‡∏¥‡∏á‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏° ‚Üí ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà 1  
2. ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡∏ñ‡∏∂‡∏á‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏¢‡πà‡∏≠‡∏¢ ‚Üí ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà 2  
3. ‡∏´‡∏≤‡∏Å‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà 2 ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ñ‡∏≤‡∏° ‚Üí ‡∏ï‡∏≠‡∏ö‡∏ß‡πà‡∏≤ **"‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"**  
## ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö (Output Format):
- ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á DOA ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ **"no"** ‡πÄ‡∏™‡∏°‡∏≠
- ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô  
- ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ‚Üí ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÄ‡∏ä‡πà‡∏ô:**"BoD, EXCOM: ‡∏°‡∏µ‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î ‡∏´‡∏£‡∏∑‡∏≠ ‡∏≠‡∏∑‡πà‡∏ô‡πÜ"**  
- ‡πÅ‡∏ö‡πà‡∏á‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô  
- ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏Ç‡∏•‡∏≥‡∏î‡∏±‡∏ö (1., 2., 3.) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏•‡∏±‡∏Å  
- ‡πÉ‡∏ä‡πâ bullet points (-) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠  
- ‡∏´‡∏≤‡∏Å‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà 2 ‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á ‚Üí ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠ ‡πÜ ‡πÇ‡∏î‡∏¢‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥  ‡πÉ‡∏´‡πâ‡∏ï‡πà‡∏≠ "‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£"
- ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô <docs>
`.trim();

    const prompt = ChatPromptTemplate.fromMessages([
      ["system", SYSTEM_PROMPT],
      ["user", "{input}"],
    ]);

    const chain = prompt.pipe(model);

    // const chainWithHistory = new RunnableWithMessageHistory({
    //   runnable: chain,
    //   getMessageHistory: (sid) => getHistory(sid),
    //   inputMessagesKey: "input",
    //   historyMessagesKey: "history",
    // });

    /** 3.6 Invoke LLM */
    const response = await chain.invoke(
      { input: expandedQuestion },
      { configurable: { sessionId } }
    );

    // üîß ‡πÅ‡∏¢‡∏Å‡πÄ‡∏≠‡∏≤ USED_DOC ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å response
   
   
    
   
    
   


    return NextResponse.json({
      content: response.content,
      type: "text",
      timestamp: new Date().toISOString(),
      sessionId,
      isNewSession: isNew,
      sessionUpdated: updated,
    });

  } catch (err) {
    console.error("LLM/Route Error:", err);
    return NextResponse.json(
      {
        content: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        type: "error",
        timestamp: new Date().toISOString(),
      },
      { status: 500 }
    );
  }
}